package main

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// User –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
type User struct {
	ID       int64
	Username string
	Balance  int
}

// GameState –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
type GameState struct {
	CurrentGame     string
	BetAmount       int
	BlackjackHand   []string
	DealerHand      []string
	RouletteBetType string
	DiceBetType     string
}

var (
	users      = make(map[int64]*User)
	gameStates = make(map[int64]*GameState)
	bot        *tgbotapi.BotAPI

	// –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
	mainKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞"),
			tgbotapi.NewKeyboardButton("üé≤ –ë–ª—ç–∫–¥–∂–µ–∫"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üé≤ –ö–æ—Å—Ç–∏"),
			tgbotapi.NewKeyboardButton("üé∞ –°–ª–æ—Ç—ã"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"),
			tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
		),
	)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
	rouletteKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üî¥ –ö—Ä–∞—Å–Ω–æ–µ"),
			tgbotapi.NewKeyboardButton("‚ö´ –ß–µ—Ä–Ω–æ–µ"),
			tgbotapi.NewKeyboardButton("üü¢ –ó–µ—Ä–æ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ö™ –ß–µ—Ç–Ω–æ–µ"),
			tgbotapi.NewKeyboardButton("‚ö´ –ù–µ—á–µ—Ç–Ω–æ–µ"),
			tgbotapi.NewKeyboardButton("1-12"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("13-24"),
			tgbotapi.NewKeyboardButton("25-36"),
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±–ª—ç–∫–¥–∂–µ–∫–∞
	blackjackKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚¨áÔ∏è –í–∑—è—Ç—å"),
			tgbotapi.NewKeyboardButton("‚úã –°—Ç–æ—è—Ç—å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å"),
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Å—Ç–µ–π
	diceKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üé≤ –ß–µ—Ç–Ω–æ–µ"),
			tgbotapi.NewKeyboardButton("üé≤ –ù–µ—á–µ—Ç–Ω–æ–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üé≤ <7"),
			tgbotapi.NewKeyboardButton("üé≤ =7"),
			tgbotapi.NewKeyboardButton("üé≤ >7"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ª–æ—Ç–æ–≤
	slotsKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å"),
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–≤–æ–∫
	betKeyboard = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("10"),
			tgbotapi.NewKeyboardButton("50"),
			tgbotapi.NewKeyboardButton("100"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("200"),
			tgbotapi.NewKeyboardButton("500"),
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	// –ö–∞—Ä—Ç–æ—á–Ω—ã–µ –º–∞—Å—Ç–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
	suits  = []string{"‚ô†", "‚ô•", "‚ô¶", "‚ô£"}
	values = []string{"2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"}

	// –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤
	slotSymbols = []string{"üçí", "üçã", "üçä", "üçá", "üçâ", "7Ô∏è‚É£", "üîî", "üíé"}
)

func main() {
	var err error
	bot, err = tgbotapi.NewBotAPI("7907157167:AAFbanlT69HoZ_67xyKf3scxD_A_gf9nRjI")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		handleMessage(update.Message)
	}
}

func handleMessage(msg *tgbotapi.Message) {
	userID := msg.Chat.ID
	text := msg.Text

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
	if _, ok := users[userID]; !ok {
		users[userID] = &User{
			ID:       userID,
			Username: msg.From.UserName,
			Balance:  1000, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	switch text {
	case "/start", "‚ùì –ü–æ–º–æ—â—å", "üîô –ù–∞–∑–∞–¥":
		sendMainMenu(userID)
	case "üí∞ –ë–∞–ª–∞–Ω—Å":
		sendBalance(userID)
	case "üé∞ –†—É–ª–µ—Ç–∫–∞":
		startRoulette(userID)
	case "üé≤ –ë–ª—ç–∫–¥–∂–µ–∫":
		startBlackjack(userID)
	case "üé≤ –ö–æ—Å—Ç–∏":
		startDice(userID)
	case "üé∞ –°–ª–æ—Ç—ã":
		startSlots(userID)
	default:
		handleGameInput(userID, text)
	}
}

func sendMainMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Casino Bot! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:")
	msg.ReplyMarkup = mainKeyboard
	bot.Send(msg)
}

func sendBalance(chatID int64) {
	user := users[chatID]
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: %d", user.Balance))
	msg.ReplyMarkup = mainKeyboard
	bot.Send(msg)
}

// –†—É–ª–µ—Ç–∫–∞
func startRoulette(chatID int64) {
	gameStates[chatID] = &GameState{
		CurrentGame: "roulette",
	}

	msg := tgbotapi.NewMessage(chatID, "üé∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –≤ —Ä—É–ª–µ—Ç–∫–µ:")
	msg.ReplyMarkup = rouletteKeyboard
	bot.Send(msg)
}

func handleRouletteBet(chatID int64, betType string) {
	state := gameStates[chatID]
	state.RouletteBetType = betType

	msg := tgbotapi.NewMessage(chatID, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
	msg.ReplyMarkup = betKeyboard
	bot.Send(msg)
}

func processRouletteBet(chatID int64, betAmount int) {
	state := gameStates[chatID]
	user := users[chatID]

	if user.Balance < betAmount {
		sendMessage(chatID, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
		return
	}

	// –°–ø–∏–Ω —Ä—É–ª–µ—Ç–∫–∏
	rand.Seed(time.Now().UnixNano())
	winNumber := rand.Intn(37) // 0-36
	winColor := getColor(winNumber)

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
	won := false
	payout := 0
	betType := state.RouletteBetType

	switch {
	case betType == "üü¢ –ó–µ—Ä–æ" && winNumber == 0:
		won = true
		payout = betAmount * 35
	case betType == "üî¥ –ö—Ä–∞—Å–Ω–æ–µ" && winColor == "red":
		won = true
		payout = betAmount
	case betType == "‚ö´ –ß–µ—Ä–Ω–æ–µ" && winColor == "black":
		won = true
		payout = betAmount
	case betType == "‚ö™ –ß–µ—Ç–Ω–æ–µ" && winNumber%2 == 0 && winNumber != 0:
		won = true
		payout = betAmount
	case betType == "‚ö´ –ù–µ—á–µ—Ç–Ω–æ–µ" && winNumber%2 == 1:
		won = true
		payout = betAmount
	case betType == "1-12" && winNumber >= 1 && winNumber <= 12:
		won = true
		payout = betAmount * 2
	case betType == "13-24" && winNumber >= 13 && winNumber <= 24:
		won = true
		payout = betAmount * 2
	case betType == "25-36" && winNumber >= 25 && winNumber <= 36:
		won = true
		payout = betAmount * 2
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
	if won {
		user.Balance += payout
	} else {
		user.Balance -= betAmount
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	result := fmt.Sprintf("üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: %d %s\n", winNumber, winColor)
	if winNumber == 0 {
		result = "üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: 0 (–∑–µ–ª–µ–Ω—ã–π)\n"
	}

	if won {
		result += fmt.Sprintf("üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ %d! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d", payout, user.Balance)
	} else {
		result += fmt.Sprintf("üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ %d. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d", betAmount, user.Balance)
	}

	sendMessageWithKeyboard(chatID, result, mainKeyboard)
	delete(gameStates, chatID)
}

// –ë–ª—ç–∫–¥–∂–µ–∫
func startBlackjack(chatID int64) {
	user := users[chatID]
	minBet := 10

	if user.Balance < minBet {
		sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ %d. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", minBet))
		return
	}

	gameStates[chatID] = &GameState{
		CurrentGame:   "blackjack",
		BlackjackHand: []string{drawCard(), drawCard()},
		DealerHand:    []string{drawCard(), "??"},
	}

	msg := fmt.Sprintf("üé≤ –ë–ª—ç–∫–¥–∂–µ–∫\n\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: %s\n–°—É–º–º–∞: %d\n\n–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: %s ??\n\n–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É:",
		strings.Join(gameStates[chatID].BlackjackHand, " "),
		calculateHand(gameStates[chatID].BlackjackHand),
		gameStates[chatID].DealerHand[0])

	sendMessageWithKeyboard(chatID, msg, betKeyboard)
}

func handleBlackjackAction(chatID int64, text string) {
	state := gameStates[chatID]
	user := users[chatID]

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏
	if betAmount, err := strconv.Atoi(text); err == nil {
		minBet := 10
		if betAmount < minBet {
			sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ %d", minBet))
			return
		}

		if user.Balance < betAmount {
			sendMessage(chatID, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
			return
		}

		state.BetAmount = betAmount
		showBlackjackOptions(chatID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞–≤–∫–∏
	if state.BetAmount == 0 {
		sendMessage(chatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É")
		return
	}

	switch text {
	case "‚¨áÔ∏è –í–∑—è—Ç—å":
		state.BlackjackHand = append(state.BlackjackHand, drawCard())
		playerTotal := calculateHand(state.BlackjackHand)

		if playerTotal > 21 {
			user.Balance -= state.BetAmount
			sendMessageWithKeyboard(chatID,
				fmt.Sprintf("üí• –ü–µ—Ä–µ–±–æ—Ä (%d)! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ %d. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d",
					playerTotal, state.BetAmount, user.Balance),
				mainKeyboard)
			delete(gameStates, chatID)
			return
		}

		showBlackjackOptions(chatID)

	case "‚úã –°—Ç–æ—è—Ç—å":
		completeBlackjackGame(chatID)

	case "üí∞ –£–¥–≤–æ–∏—Ç—å":
		if len(state.BlackjackHand) != 2 {
			sendMessage(chatID, "‚ö†Ô∏è –£–¥–≤–æ–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ 2 –∫–∞—Ä—Ç–∞—Ö")
			return
		}

		if user.Balance < state.BetAmount*2 {
			sendMessage(chatID, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è")
			return
		}

		state.BetAmount *= 2
		state.BlackjackHand = append(state.BlackjackHand, drawCard())
		playerTotal := calculateHand(state.BlackjackHand)

		if playerTotal > 21 {
			user.Balance -= state.BetAmount
			sendMessageWithKeyboard(chatID,
				fmt.Sprintf("üí• –ü–µ—Ä–µ–±–æ—Ä (%d) –ø–æ—Å–ª–µ —É–¥–≤–æ–µ–Ω–∏—è! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ %d. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d",
					playerTotal, state.BetAmount, user.Balance),
				mainKeyboard)
		} else {
			completeBlackjackGame(chatID)
		}

		delete(gameStates, chatID)
	}
}

// –ö–æ—Å—Ç–∏
func startDice(chatID int64) {
	gameStates[chatID] = &GameState{
		CurrentGame: "dice",
	}

	msg := tgbotapi.NewMessage(chatID, "üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –≤ –∫–æ—Å—Ç—è—Ö:")
	msg.ReplyMarkup = diceKeyboard
	bot.Send(msg)
}

func handleDiceBet(chatID int64, betType string) {
	state := gameStates[chatID]
	state.DiceBetType = betType

	msg := tgbotapi.NewMessage(chatID, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
	msg.ReplyMarkup = betKeyboard
	bot.Send(msg)
}

func processDiceBet(chatID int64, betAmount int) {
	state := gameStates[chatID]
	user := users[chatID]

	if user.Balance < betAmount {
		sendMessage(chatID, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
		return
	}

	// –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–µ–π
	rand.Seed(time.Now().UnixNano())
	dice1 := rand.Intn(6) + 1
	dice2 := rand.Intn(6) + 1
	total := dice1 + dice2

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
	won := false
	payout := 0
	betType := state.DiceBetType

	switch {
	case betType == "üé≤ –ß–µ—Ç–Ω–æ–µ" && total%2 == 0:
		won = true
		payout = betAmount
	case betType == "üé≤ –ù–µ—á–µ—Ç–Ω–æ–µ" && total%2 == 1:
		won = true
		payout = betAmount
	case betType == "üé≤ <7" && total < 7:
		won = true
		payout = betAmount
	case betType == "üé≤ =7" && total == 7:
		won = true
		payout = betAmount * 4
	case betType == "üé≤ >7" && total > 7:
		won = true
		payout = betAmount
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
	if won {
		user.Balance += payout
	} else {
		user.Balance -= betAmount
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	result := fmt.Sprintf("üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: %d –∏ %d (—Å—É–º–º–∞: %d)\n", dice1, dice2, total)

	if won {
		result += fmt.Sprintf("üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ %d! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d", payout, user.Balance)
	} else {
		result += fmt.Sprintf("üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ %d. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d", betAmount, user.Balance)
	}

	sendMessageWithKeyboard(chatID, result, mainKeyboard)
	delete(gameStates, chatID)
}

// –°–ª–æ—Ç—ã
func startSlots(chatID int64) {
	gameStates[chatID] = &GameState{
		CurrentGame: "slots",
	}

	msg := tgbotapi.NewMessage(chatID, "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª–æ—Ç—ã!\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
	msg.ReplyMarkup = betKeyboard
	bot.Send(msg)
}

func processSlotsBet(chatID int64, betAmount int) {
	state := gameStates[chatID]
	user := users[chatID]

	if user.Balance < betAmount {
		sendMessage(chatID, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
		return
	}

	if betAmount < 10 {
		sendMessage(chatID, "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10")
		return
	}

	state.BetAmount = betAmount

	// –ö—Ä—É—Ç–∏–º —Å–ª–æ—Ç—ã
	rand.Seed(time.Now().UnixNano())
	reels := make([]string, 3)
	for i := 0; i < 3; i++ {
		reels[i] = slotSymbols[rand.Intn(len(slotSymbols))]
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
	won := false
	payout := 0

	// –í—Å–µ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
	if reels[0] == reels[1] && reels[1] == reels[2] {
		won = true
		switch reels[0] {
		case "7Ô∏è‚É£":
			payout = betAmount * 100 // –î–∂–µ–∫–ø–æ—Ç –∑–∞ —Ç—Ä–∏ —Å–µ–º–µ—Ä–∫–∏
		case "üíé":
			payout = betAmount * 50
		case "üîî":
			payout = betAmount * 20
		default:
			payout = betAmount * 10
		}
	} else if reels[0] == reels[1] || reels[1] == reels[2] || reels[0] == reels[2] {
		// –î–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
		won = true
		payout = betAmount
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
	if won {
		user.Balance += payout
	} else {
		user.Balance -= betAmount
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	result := fmt.Sprintf("üé∞ [ %s | %s | %s ]\n", reels[0], reels[1], reels[2])

	if won {
		result += fmt.Sprintf("üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ %d! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d", payout, user.Balance)
	} else {
		result += fmt.Sprintf("üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ %d. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d", betAmount, user.Balance)
	}

	msg := tgbotapi.NewMessage(chatID, result)
	msg.ReplyMarkup = slotsKeyboard
	bot.Send(msg)
}

func showBlackjackOptions(chatID int64) {
	state := gameStates[chatID]
	playerTotal := calculateHand(state.BlackjackHand)

	msg := fmt.Sprintf("üé≤ –í–∞—à–∏ –∫–∞—Ä—Ç—ã: %s\n–°—É–º–º–∞: %d\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
		strings.Join(state.BlackjackHand, " "),
		playerTotal)

	sendMessageWithKeyboard(chatID, msg, blackjackKeyboard)
}

func completeBlackjackGame(chatID int64) {
	state := gameStates[chatID]
	user := users[chatID]

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
	state.DealerHand[1] = drawCard()
	dealerTotal := calculateHand(state.DealerHand)

	// –î–∏–ª–µ—Ä –¥–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã –¥–æ 17
	for dealerTotal < 17 {
		state.DealerHand = append(state.DealerHand, drawCard())
		dealerTotal = calculateHand(state.DealerHand)
	}

	playerTotal := calculateHand(state.BlackjackHand)

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	result := ""
	if playerTotal > 21 {
		result = fmt.Sprintf("üí• –ü–µ—Ä–µ–±–æ—Ä (%d)! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ %d.", playerTotal, state.BetAmount)
		user.Balance -= state.BetAmount
	} else if dealerTotal > 21 {
		result = fmt.Sprintf("üéâ –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª (%d)! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ %d.", dealerTotal, state.BetAmount)
		user.Balance += state.BetAmount
	} else if playerTotal > dealerTotal {
		result = fmt.Sprintf("üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ (%d –ø—Ä–æ—Ç–∏–≤ %d)! –í—ã–∏–≥—Ä—ã—à %d.", playerTotal, dealerTotal, state.BetAmount)
		user.Balance += state.BetAmount
	} else if playerTotal == dealerTotal {
		result = fmt.Sprintf("ü§ù –ù–∏—á—å—è (%d –ø—Ä–æ—Ç–∏–≤ %d). –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", playerTotal, dealerTotal)
	} else {
		result = fmt.Sprintf("üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ (%d –ø—Ä–æ—Ç–∏–≤ %d). –ü–æ—Ç–µ—Ä—è %d.", playerTotal, dealerTotal, state.BetAmount)
		user.Balance -= state.BetAmount
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
	msg := "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:\n\n" +
		"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: " + strings.Join(state.BlackjackHand, " ") + " = " + strconv.Itoa(playerTotal) + "\n" +
		"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: " + strings.Join(state.DealerHand, " ") + " = " + strconv.Itoa(dealerTotal) + "\n\n" +
		result + "\n" +
		"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: " + strconv.Itoa(user.Balance)

	sendMessageWithKeyboard(chatID, msg, mainKeyboard)
	delete(gameStates, chatID)
}

func drawCard() string {
	rand.Seed(time.Now().UnixNano())
	value := values[rand.Intn(len(values))]
	suit := suits[rand.Intn(len(suits))]
	return value + suit
}

func calculateHand(hand []string) int {
	total := 0
	aces := 0

	for _, card := range hand {
		if card == "??" {
			continue // –∫–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞ —Å–∫—Ä—ã—Ç–∞
		}

		value := strings.TrimRight(card, "‚ô†‚ô•‚ô¶‚ô£")
		switch value {
		case "A":
			total += 11
			aces++
		case "K", "Q", "J":
			total += 10
		default:
			if num, err := strconv.Atoi(value); err == nil {
				total += num
			}
		}
	}

	// –£—á–∏—Ç—ã–≤–∞–µ–º —Ç—É–∑—ã –∫–∞–∫ 1, –µ—Å–ª–∏ –ø–µ—Ä–µ–±–æ—Ä
	for total > 21 && aces > 0 {
		total -= 10
		aces--
	}

	return total
}

func getColor(number int) string {
	if number == 0 {
		return "green"
	}

	redNumbers := []int{1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
	for _, n := range redNumbers {
		if n == number {
			return "red"
		}
	}
	return "black"
}

func handleGameInput(chatID int64, text string) {
	state, ok := gameStates[chatID]
	if !ok {
		return
	}

	switch state.CurrentGame {
	case "roulette":
		switch text {
		case "üî¥ –ö—Ä–∞—Å–Ω–æ–µ", "‚ö´ –ß–µ—Ä–Ω–æ–µ", "üü¢ –ó–µ—Ä–æ", "‚ö™ –ß–µ—Ç–Ω–æ–µ", "‚ö´ –ù–µ—á–µ—Ç–Ω–æ–µ", "1-12", "13-24", "25-36":
			handleRouletteBet(chatID, text)
		case "10", "50", "100", "200", "500":
			if betAmount, err := strconv.Atoi(text); err == nil {
				processRouletteBet(chatID, betAmount)
			}
		default:
			if betAmount, err := strconv.Atoi(text); err == nil {
				processRouletteBet(chatID, betAmount)
			} else {
				sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏")
			}
		}
	case "blackjack":
		handleBlackjackAction(chatID, text)
	case "dice":
		switch text {
		case "üé≤ –ß–µ—Ç–Ω–æ–µ", "üé≤ –ù–µ—á–µ—Ç–Ω–æ–µ", "üé≤ <7", "üé≤ =7", "üé≤ >7":
			handleDiceBet(chatID, text)
		case "10", "50", "100", "200", "500":
			if betAmount, err := strconv.Atoi(text); err == nil {
				processDiceBet(chatID, betAmount)
			}
		default:
			if betAmount, err := strconv.Atoi(text); err == nil {
				processDiceBet(chatID, betAmount)
			} else {
				sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏")
			}
		}
	case "slots":
		switch text {
		case "üé∞ –ö—Ä—É—Ç–∏—Ç—å":
			if state.BetAmount > 0 {
				processSlotsBet(chatID, state.BetAmount)
			} else {
				sendMessage(chatID, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
			}
		case "10", "50", "100", "200", "500":
			if betAmount, err := strconv.Atoi(text); err == nil {
				processSlotsBet(chatID, betAmount)
			}
		default:
			if betAmount, err := strconv.Atoi(text); err == nil {
				processSlotsBet(chatID, betAmount)
			} else {
				sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏")
			}
		}
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}

func sendMessageWithKeyboard(chatID int64, text string, keyboard tgbotapi.ReplyKeyboardMarkup) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

package main

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// User –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
type User struct {
	ID       int64
	Username string
	Balance  int
}

// GameState –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
type GameState struct {
	CurrentGame   string
	BetAmount     int
	BlackjackHand []string
	DealerHand    []string
}

var (
	users      = make(map[int64]*User)
	gameStates = make(map[int64]*GameState)
	bot        *tgbotapi.BotAPI
)

// –ö–∞—Ä—Ç–æ—á–Ω—ã–µ –º–∞—Å—Ç–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
var suits = []string{"‚ô†", "‚ô•", "‚ô¶", "‚ô£"}
var values = []string{"2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"}

func main() {
	var err error
	bot, err = tgbotapi.NewBotAPI("8075891599:AAE3IUQ3YGpIrEcwsjkBc-rbageCGJ8xX_U")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		handleMessage(update.Message)
	}
}

func handleMessage(msg *tgbotapi.Message) {
	userID := msg.Chat.ID
	text := msg.Text

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
	if _, ok := users[userID]; !ok {
		users[userID] = &User{
			ID:       userID,
			Username: msg.From.UserName,
			Balance:  1000, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	switch text {
	case "/start":
		sendMessage(userID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ-–±–æ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n/roulette - –†—É–ª–µ—Ç–∫–∞\n/blackjack - –ë–ª—ç–∫–¥–∂–µ–∫ (21)\n/balance - –ë–∞–ª–∞–Ω—Å")
	case "/balance":
		sendBalance(userID)
	case "/roulette":
		startRoulette(userID)
	case "/blackjack":
		startBlackjack(userID)
	default:
		handleGameInput(userID, text)
	}
}

func handleGameInput(userID int64, text string) {
	state, ok := gameStates[userID]
	if !ok {
		return
	}

	switch state.CurrentGame {
	case "roulette":
		handleRouletteBet(userID, text)
	case "blackjack":
		handleBlackjackAction(userID, text)
	}
}

// –†—É–ª–µ—Ç–∫–∞
func startRoulette(userID int64) {
	gameStates[userID] = &GameState{
		CurrentGame: "roulette",
	}

	msg := "–°—Ç–∞–≤–∫–∏ –Ω–∞ —Ä—É–ª–µ—Ç–∫—É!\n\n" +
		"–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞:\n" +
		"- –ß–∏—Å–ª–æ (1-36) - –≤—ã–ø–ª–∞—Ç–∞ 35:1\n" +
		"- –ö—Ä–∞—Å–Ω–æ–µ/–ß–µ—Ä–Ω–æ–µ (red/black) - –≤—ã–ø–ª–∞—Ç–∞ 1:1\n" +
		"- –ß–µ—Ç–Ω–æ–µ/–ù–µ—á–µ—Ç–Ω–æ–µ (even/odd) - –≤—ã–ø–ª–∞—Ç–∞ 1:1\n" +
		"- –ü–µ—Ä–≤—ã–µ 12, —Å—Ä–µ–¥–Ω–∏–µ 12, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 (1st12, 2nd12, 3rd12) - –≤—ã–ø–ª–∞—Ç–∞ 2:1\n\n" +
		"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Å—É–º–º–∞> <—Ç–∏–ø —Å—Ç–∞–≤–∫–∏>\n" +
		"–ü—Ä–∏–º–µ—Ä: 100 red\n\n" +
		"–í–∞—à –±–∞–ª–∞–Ω—Å: " + strconv.Itoa(users[userID].Balance)

	sendMessage(userID, msg)
}

func handleRouletteBet(userID int64, text string) {
	parts := strings.Split(text, " ")
	if len(parts) != 2 {
		sendMessage(userID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: 100 red")
		return
	}

	betAmount, err := strconv.Atoi(parts[0])
	if err != nil || betAmount <= 0 {
		sendMessage(userID, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏")
		return
	}

	user := users[userID]
	if user.Balance < betAmount {
		sendMessage(userID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
		return
	}

	betType := strings.ToLower(parts[1])
	validBets := map[string]bool{
		"red": true, "black": true, "even": true, "odd": true,
		"1st12": true, "2nd12": true, "3rd12": true,
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫ (1-36)
	isNumberBet := false
	if num, err := strconv.Atoi(betType); err == nil {
		if num >= 1 && num <= 36 {
			isNumberBet = true
			validBets[betType] = true
		}
	}

	if !validBets[betType] && !isNumberBet {
		sendMessage(userID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç–∞–≤–∫–∏")
		return
	}

	// –°–ø–∏–Ω —Ä—É–ª–µ—Ç–∫–∏
	rand.Seed(time.Now().UnixNano())
	winNumber := rand.Intn(37) // 0-36
	winColor := getColor(winNumber)

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
	won := false
	payout := 0

	switch {
	case isNumberBet && strconv.Itoa(winNumber) == betType:
		won = true
		payout = betAmount * 35
	case betType == "red" && winColor == "red":
		won = true
		payout = betAmount
	case betType == "black" && winColor == "black":
		won = true
		payout = betAmount
	case betType == "even" && winNumber%2 == 0 && winNumber != 0:
		won = true
		payout = betAmount
	case betType == "odd" && winNumber%2 == 1:
		won = true
		payout = betAmount
	case betType == "1st12" && winNumber >= 1 && winNumber <= 12:
		won = true
		payout = betAmount * 2
	case betType == "2nd12" && winNumber >= 13 && winNumber <= 24:
		won = true
		payout = betAmount * 2
	case betType == "3rd12" && winNumber >= 25 && winNumber <= 36:
		won = true
		payout = betAmount * 2
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
	if won {
		user.Balance += payout
	} else {
		user.Balance -= betAmount
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	result := fmt.Sprintf("üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: %d %s\n", winNumber, winColor)
	if winNumber == 0 {
		result = fmt.Sprintf("üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: 0 (–∑–µ–ª–µ–Ω—ã–π)\n")
	}

	if won {
		result += fmt.Sprintf("üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ %d! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d", payout, user.Balance)
	} else {
		result += fmt.Sprintf("üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ %d. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d", betAmount, user.Balance)
	}

	sendMessage(userID, result)
	delete(gameStates, userID)
}

func getColor(number int) string {
	if number == 0 {
		return "green"
	}

	redNumbers := []int{1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}
	for _, n := range redNumbers {
		if n == number {
			return "red"
		}
	}
	return "black"
}

// –ë–ª—ç–∫–¥–∂–µ–∫ (21)
func startBlackjack(userID int64) {
	user := users[userID]

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏
	minBet := 10
	if user.Balance < minBet {
		sendMessage(userID, fmt.Sprintf("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ %d. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", minBet))
		return
	}

	gameStates[userID] = &GameState{
		CurrentGame:   "blackjack",
		BlackjackHand: []string{drawCard(), drawCard()},
		DealerHand:    []string{drawCard(), "??"},
	}

	msg := "üé≤ –ë–ª—ç–∫–¥–∂–µ–∫ (21)\n\n" +
		"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: " + strings.Join(gameStates[userID].BlackjackHand, " ") + "\n" +
		"–°—É–º–º–∞: " + strconv.Itoa(calculateHand(gameStates[userID].BlackjackHand)) + "\n\n" +
		"–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: " + gameStates[userID].DealerHand[0] + " ??" + "\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n" +
		"<—Å—Ç–∞–≤–∫–∞> - –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É (–º–∏–Ω. " + strconv.Itoa(minBet) + ")\n" +
		"/hit - –í–∑—è—Ç—å –∫–∞—Ä—Ç—É\n" +
		"/stand - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è\n" +
		"/double - –£–¥–≤–æ–∏—Ç—å (–µ—Å–ª–∏ 2 –∫–∞—Ä—Ç—ã)\n\n" +
		"–í–∞—à –±–∞–ª–∞–Ω—Å: " + strconv.Itoa(user.Balance)

	sendMessage(userID, msg)
}

func handleBlackjackAction(userID int64, text string) {
	state := gameStates[userID]
	user := users[userID]

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏
	if betAmount, err := strconv.Atoi(text); err == nil {
		minBet := 10
		if betAmount < minBet {
			sendMessage(userID, fmt.Sprintf("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ %d", minBet))
			return
		}

		if user.Balance < betAmount {
			sendMessage(userID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
			return
		}

		state.BetAmount = betAmount
		sendMessage(userID, fmt.Sprintf("–°—Ç–∞–≤–∫–∞ %d –ø—Ä–∏–Ω—è—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: /hit /stand /double", betAmount))
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞–≤–∫–∏
	if state.BetAmount == 0 {
		sendMessage(userID, "–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É")
		return
	}

	switch text {
	case "/hit":
		state.BlackjackHand = append(state.BlackjackHand, drawCard())
		playerTotal := calculateHand(state.BlackjackHand)

		if playerTotal > 21 {
			user.Balance -= state.BetAmount
			sendMessage(userID, fmt.Sprintf("–ü–µ—Ä–µ–±–æ—Ä (%d)! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ %d. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d",
				playerTotal, state.BetAmount, user.Balance))
			delete(gameStates, userID)
			return
		}

		msg := "–í–∞—à–∏ –∫–∞—Ä—Ç—ã: " + strings.Join(state.BlackjackHand, " ") + "\n" +
			"–°—É–º–º–∞: " + strconv.Itoa(playerTotal) + "\n\n" +
			"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n/hit /stand"

		if len(state.BlackjackHand) == 2 {
			msg += " /double"
		}

		sendMessage(userID, msg)

	case "/stand":
		completeBlackjackGame(userID)

	case "/double":
		if len(state.BlackjackHand) != 2 {
			sendMessage(userID, "–£–¥–≤–æ–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ 2 –∫–∞—Ä—Ç–∞—Ö")
			return
		}

		if user.Balance < state.BetAmount*2 {
			sendMessage(userID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è")
			return
		}

		state.BetAmount *= 2
		state.BlackjackHand = append(state.BlackjackHand, drawCard())
		playerTotal := calculateHand(state.BlackjackHand)

		if playerTotal > 21 {
			user.Balance -= state.BetAmount
			sendMessage(userID, fmt.Sprintf("–ü–µ—Ä–µ–±–æ—Ä (%d) –ø–æ—Å–ª–µ —É–¥–≤–æ–µ–Ω–∏—è! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ %d. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %d",
				playerTotal, state.BetAmount, user.Balance))
		} else {
			completeBlackjackGame(userID)
		}

		delete(gameStates, userID)
	}
}

func completeBlackjackGame(userID int64) {
	state := gameStates[userID]
	user := users[userID]

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
	state.DealerHand[1] = drawCard()
	dealerTotal := calculateHand(state.DealerHand)

	// –î–∏–ª–µ—Ä –¥–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã –¥–æ 17
	for dealerTotal < 17 {
		state.DealerHand = append(state.DealerHand, drawCard())
		dealerTotal = calculateHand(state.DealerHand)
	}

	playerTotal := calculateHand(state.BlackjackHand)

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	result := ""
	if playerTotal > 21 {
		result = fmt.Sprintf("–ü–µ—Ä–µ–±–æ—Ä (%d)! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ %d.", playerTotal, state.BetAmount)
		user.Balance -= state.BetAmount
	} else if dealerTotal > 21 {
		result = fmt.Sprintf("–î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª (%d)! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ %d.", dealerTotal, state.BetAmount)
		user.Balance += state.BetAmount
	} else if playerTotal > dealerTotal {
		result = fmt.Sprintf("–í—ã –ø–æ–±–µ–¥–∏–ª–∏ (%d –ø—Ä–æ—Ç–∏–≤ %d)! –í—ã–∏–≥—Ä—ã—à %d.", playerTotal, dealerTotal, state.BetAmount)
		user.Balance += state.BetAmount
	} else if playerTotal == dealerTotal {
		result = fmt.Sprintf("–ù–∏—á—å—è (%d –ø—Ä–æ—Ç–∏–≤ %d). –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", playerTotal, dealerTotal)
	} else {
		result = fmt.Sprintf("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ (%d –ø—Ä–æ—Ç–∏–≤ %d). –ü–æ—Ç–µ—Ä—è %d.", playerTotal, dealerTotal, state.BetAmount)
		user.Balance -= state.BetAmount
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
	msg := "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:\n\n" +
		"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: " + strings.Join(state.BlackjackHand, " ") + " = " + strconv.Itoa(playerTotal) + "\n" +
		"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: " + strings.Join(state.DealerHand, " ") + " = " + strconv.Itoa(dealerTotal) + "\n\n" +
		result + "\n" +
		"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: " + strconv.Itoa(user.Balance)

	sendMessage(userID, msg)
	delete(gameStates, userID)
}

func drawCard() string {
	rand.Seed(time.Now().UnixNano())
	value := values[rand.Intn(len(values))]
	suit := suits[rand.Intn(len(suits))]
	return value + suit
}

func calculateHand(hand []string) int {
	total := 0
	aces := 0

	for _, card := range hand {
		if card == "??" {
			continue // –∫–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞ —Å–∫—Ä—ã—Ç–∞
		}

		value := strings.TrimRight(card, "‚ô†‚ô•‚ô¶‚ô£")
		switch value {
		case "A":
			total += 11
			aces++
		case "K", "Q", "J":
			total += 10
		default:
			if num, err := strconv.Atoi(value); err == nil {
				total += num
			}
		}
	}

	// –£—á–∏—Ç—ã–≤–∞–µ–º —Ç—É–∑—ã –∫–∞–∫ 1, –µ—Å–ª–∏ –ø–µ—Ä–µ–±–æ—Ä
	for total > 21 && aces > 0 {
		total -= 10
		aces--
	}

	return total
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}

func sendBalance(userID int64) {
	user := users[userID]
	sendMessage(userID, fmt.Sprintf("–í–∞—à –±–∞–ª–∞–Ω—Å: %d", user.Balance))
}
